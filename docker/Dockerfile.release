# Multi-stage Dockerfile for Gorev v0.9.0 Release
# This creates a minimal production image

# Build stage
FROM golang:1.22-alpine AS builder

# Install build dependencies
RUN apk add --no-cache git make

# Set working directory
WORKDIR /build

# Copy go mod files
COPY gorev-mcpserver/go.mod gorev-mcpserver/go.sum ./
RUN go mod download

# Copy source code
COPY gorev-mcpserver/ ./

# Build binary with version info
ARG VERSION=v0.9.0
ARG BUILD_TIME
ARG GIT_COMMIT

RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -ldflags "-X main.version=${VERSION} -X main.buildTime=${BUILD_TIME} -X main.gitCommit=${GIT_COMMIT}" \
    -o gorev cmd/gorev/main.go

# Runtime stage
FROM alpine:latest

# Install runtime dependencies
RUN apk add --no-cache ca-certificates tzdata

# Create non-root user
RUN addgroup -g 1000 gorev && \
    adduser -D -u 1000 -G gorev gorev

# Create data directory
RUN mkdir -p /data && chown gorev:gorev /data

# Copy binary from builder
COPY --from=builder /build/gorev /usr/local/bin/gorev

# Copy migrations
COPY --from=builder /build/internal/veri/migrations /data/internal/veri/migrations

# Set environment
ENV GOREV_ROOT=/data
ENV GOREV_DATA_DIR=/data

# Use non-root user
USER gorev

# Set working directory
WORKDIR /data

# Expose MCP server port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD gorev version || exit 1

# Default command
ENTRYPOINT ["gorev"]
CMD ["serve"]