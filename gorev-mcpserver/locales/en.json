{
  "lang": {
    "code": "en"
  },
  "cli": {
    "appDescription": "Powerful and flexible task management MCP server",
    "appLongDescription": "Gorev is a modern task management server that provides task management\ncapabilities to AI assistants via Model Context Protocol (MCP).\n\n🚀 Compatible with Claude Code, VS Code, Cursor, Windsurf and other MCP-compatible editors",
    "appExamples": "  # Start MCP server\n  gorev serve\n\n  # Start with English language\n  gorev serve --lang=en\n\n  # List templates\n  gorev template list\n\n  # Quick task creation\n  gorev task quick\n\n  # Run in debug mode\n  gorev serve --debug",
    "serve": "Start MCP server",
    "serveLongDescription": "Starts the Model Context Protocol (MCP) server.\nAI assistants connect to this server to access task management tools.\n\n🔧 Usage with Claude Code:\n  1. Add MCP server configuration to your CLAUDE.md file\n  2. Start the server\n  3. Use MCP tools from Claude Code",
    "serveExamples": "  # Start server (Turkish)\n  gorev serve\n\n  # Start with English\n  gorev serve --lang=en\n\n  # Start in debug mode\n  gorev serve --debug\n\n  # Start in background (Linux/macOS)\n  nohup gorev serve > gorev.log 2>&1 &",
    "version": "Show version information",
    "template": "Task template management",
    "templateDescription": "List and manage templates for creating tasks",
    "templateList": "List available templates",
    "templateShow": "Show template details",
    "templateInit": "Recreate default templates",
    "templateAliases": "List template aliases",
    "ide": "IDE extension management",
    "ideDescription": "Gorev extension installation and management for VS Code, Cursor and Windsurf IDEs",
    "ideDetect": "Detect IDEs on the system",
    "ideInstall": "Install Gorev extension to IDE",
    "ideUninstall": "Remove Gorev extension from IDE",
    "ideStatus": "Check extension installation status",
    "ideUpdate": "Update extension to latest version",
    "ideConfig": "View IDE management settings",
    "ideConfigSet": "Set IDE management setting",
    "mcpTest": "Test MCP tools",
    "mcpDescription": "Test MCP (Model Context Protocol) tools directly from command line.",
    "debug": "Enable debug mode",
    "list": "List available MCP tools",
    "call": "Call specific MCP tool",
    "listTasks": "List tasks (gorev_listele shortcut)",
    "createTask": "Create new task (gorev_olustur shortcut)",
    "showTask": "Show task details (gorev_detay shortcut)",
    "listProjects": "List projects (proje_listele shortcut)"
  },
  "flags": {
    "language": "Language preference (tr, en)",
    "allProjects": "Show tasks from all projects",
    "maxTasks": "Maximum number of tasks",
    "offset": "Starting offset",
    "title": "Task title (required)",
    "taskDescription": "Task description",
    "priority": "Priority (yuksek, orta, dusuk)",
    "projectId": "Project ID",
    "jsonOutput": "JSON format output"
  },
  "error": {
    "titleRequired": "title is required",
    "confirmationRequired": "'onay' parameter must be true to delete task",
    "editFieldRequired": "at least one edit field must be specified (baslik, aciklama, oncelik, proje_id or son_tarih)",
    "projectNotFound": "project not found: {{.Error}}",
    "directTaskCreateDeprecated": "gorev_olustur is deprecated. Please use templateden_gorev_olustur tool.",
    "invalidQueryFormat": "invalid query format",
    "circularDependency": "circular dependency detected",
    "projectNotFoundId": "project not found: {{.Id}}",
    "invalidDateFormat": "invalid due date format (must be YYYY-MM-DD): {{.Error}}",
    "invalidStatus": "invalid status: {{.Status}}. Valid statuses: {{.ValidStatuses}}",
    "taskCannotStart": "this task cannot be started, the following tasks must be completed first: {{.Dependencies}}",
    "taskCannotComplete": "this task cannot be completed, all subtasks must be completed first",
    "taskHasSubtasks": "this task cannot be deleted, {{.Count}} subtasks must be deleted first",
    "subtaskProjectMismatch": "subtask and parent task must be in same project",
    "noActiveProject": "proje_id not specified and no active project set",
    "contextSaveFailed": "context save error: {{.Error}}",
    "templateNotFoundId": "template not found: {{.Id}}",
    "templateNotFoundAlias": "template not found (alias): {{.Alias}}",
    "interactionSaveFailed": "interaction save error: {{.Error}}",
    "statusUpdateFailed": "status update error: {{.Error}}",
    "autoStatusUpdateFailed": "auto status update error: {{.Error}}",
    "taskCannotStartDependencies": "this task cannot be started, the following tasks must be completed first: {{.Dependencies}}",
    "taskCannotCompleteSubtasks": "this task cannot be completed, all subtasks must be completed first",
    "taskHasSubtasksCannotDelete": "this task cannot be deleted, {{.Count}} subtasks must be deleted first",
    "requiredFieldMissing": "required field missing: {{.Field}}",
    "jsonMarshalFailed": "JSON marshalling error ({{.Field}}): {{.Error}}",
    "lastInteractionUpdateFailed": "last interaction update failed ({{.TaskID}}): {{.Error}}",
    "invalidStatusBatch": "invalid status: {{.Status}}",
    "invalidPriorityBatch": "invalid priority: {{.Priority}}",
    "titleCannotBeEmpty": "title cannot be empty",
    "taskNotFound": "Task not found: {{.Error}}",
    "parentTaskNotFound": "parent task not found",
    "invalidDateFormatBatch": "invalid date format (expected YYYY-MM-DD): {{.Date}}",
    "taskUpdateError": "update error: {{.Error}}",
    "noActiveProjectSet": "No active project has been set yet.",
    "activeProjectRemoved": "✓ Active project setting removed.",
    "editFieldRequiredDetailed": "at least one edit field must be specified (baslik, aciklama, oncelik, proje_id or son_tarih)",
    "deleteConfirmationRequired": "'onay' parameter must be true to delete task",
    "taskIdsArrayRequired": "task_ids must be in array format",
    "invalidTaskIdIndex": "invalid task ID index {{.Index}}",
    "tagsArrayRequired": "tags must be in array format",
    "invalidTagIndex": "invalid tag index {{.Index}}",
    "projectNotFoundDetailed": "project not found: {{.Error}}",
    "invalidFieldValue": "invalid value for field '{{.Field}}': '{{.Value}}'. Valid values: {{.ValidValues}}",
    "taskMovedToRoot": "✓ Task moved to root level",
    "taskMovedToParent": "✓ Task moved to new parent task",
    "unknownTool": "unknown tool: {{.Tool}}",
    "activeTaskSetSuccess": "✅ Task {{.TaskID}} successfully set as active task.",
    "noActiveTaskCurrent": "ℹ️ No active task currently.",
    "noRecentTasks": "ℹ️ No recently interacted tasks.",
    "noValidUpdatesFound": "No valid updates found",
    "batchUpdateFailed": "batch update failed: {{.Error}}",
    "queryFailed": "query failed: {{.Error}}",
    "noQueryResults": "ℹ️ No results found for query '{{.Query}}'.",
    "fileWatcherInitFailed": "File watcher system could not be initialized",
    "taskIdRequiredFileWatch": "task_id is required",
    "filePathRequired": "file_path is required",
    "taskNotFoundFileWatch": "Task not found: {{.Error}}",
    "fileWatchAddFailed": "Failed to add file watch: {{.Error}}",
    "fileWatchRemoveFailed": "Failed to remove file watch: {{.Error}}",
    "activeProjectRetrieve": "failed to retrieve active project: {{.Error}}",
    "searchFailed": "search error: {{.Error}}",
    "ftsSearchFailed": "FTS search query failed: {{.Error}}",
    "fuzzySearchFailed": "fuzzy search failed: {{.Error}}",
    "tasksRetrieveFailed": "failed to retrieve tasks: {{.Error}}",
    "searchHistoryFailed": "failed to record search history: {{.Error}}",
    "scanResultFailed": "failed to scan result: {{.Error}}",
    "filterProfileNameRequired": "filter profile name is required",
    "filterProfileNameExists": "a profile with this name already exists: {{.Name}}",
    "filterProfileNotFound": "filter profile not found: {{.ID}}",
    "filterProfileCreateFailed": "failed to create filter profile: {{.Error}}",
    "filterProfileUpdateFailed": "failed to update filter profile: {{.Error}}",
    "filterProfileDeleteFailed": "failed to delete filter profile: {{.Error}}",
    "filterProfileMarshalFailed": "failed to process filter settings: {{.Error}}",
    "filterProfileParseFailed": "failed to parse filter settings: {{.Error}}",
    "cannotDeleteDefaultProfile": "cannot delete default profile",
    "searchHistoryCleanFailed": "failed to clean search history: {{.Error}}",
    "filterProfileGetFailed": "failed to get filter profile: {{.Error}}",
    "filterProfileListFailed": "failed to list filter profiles: {{.Error}}",
    "filterProfileUseFailed": "failed to mark filter profile as used: {{.Error}}",
    "filterProfileSearchFailed": "failed to search filter profiles: {{.Error}}",
    "migrationFailed": "Database migration failed: {{.Error}}",
    "dbInitFailed": "Database initialization failed: {{.Error}}",
    "migrationExtractFailed": "Failed to extract embedded migrations: {{.Error}}",
    "migrationDirCreateFailed": "Failed to create migration directory: {{.Error}}",
    "migrationFileWriteFailed": "Failed to write migration files: {{.Error}}",
    "dbOpenFailed": "Failed to open database: {{.Error}}",
    "migrationDriverFailed": "Failed to create migration driver: {{.Error}}",
    "migrationInstanceFailed": "Failed to create migration instance: {{.Error}}",
    "migrationProcessFailed": "Migration process failed: {{.Error}}"
  },
  "success": {
    "activeProjectSet": "✓ Active project set: {{.Project}}",
    "activeProjectRemoved": "✓ Active project setting removed.",
    "taskUpdated": "✓ Task updated: {{.OldStatus}} → {{.NewStatus}}",
    "projectCreated": "✓ Project created: {{.Name}} (ID: {{.Id}})",
    "taskEdited": "✓ Task edited: {{.Title}}",
    "taskDeleted": "✓ Task deleted: {{.Title}} (ID: {{.Id}})",
    "dependencyAdded": "✓ Dependency added: {{.Source}} -> {{.Target}} ({{.Type}})",
    "subtaskCreated": "✓ Subtask created: {{.Title}} (ID: {{.Id}})",
    "taskMovedToRoot": "✓ Task moved to root level",
    "taskMovedToParent": "✓ Task moved to new parent task",
    "taskCreatedFromTemplate": "✓ Task created from template: {{.Title}} (ID: {{.Id}})",
    "activeTaskSet": "{{.Title}} successfully set as active task",
    "defaultTemplatesCreated": "✓ Default templates created successfully.",
    "fileWatchAdded": "✅ File path '{{.FilePath}}' added to watch for task '{{.TaskTitle}}'.\n\nFile changes will be automatically tracked and task status will be updated as needed.",
    "fileWatchRemoved": "✅ File path '{{.FilePath}}' removed from watch for task ID {{.TaskID}}.",
    "filterProfileCreated": "✅ Filter profile created: {{.Name}} (ID: {{.ID}})",
    "filterProfileUpdated": "✅ Filter profile updated: {{.Name}}",
    "filterProfileDeleted": "✅ Filter profile deleted: {{.Name}}",
    "searchHistoryCleaned": "✅ {{.Count}} old search records cleaned (older than {{.Days}} days)"
  },
  "display": {
    "noTemplates": "No templates found yet.",
    "title": "Title: {{.Title}}",
    "desc": "Description: {{.Description}}",
    "titleTemplate": "Title Template: {{.Template}}",
    "options": "Options: {{.Options}}",
    "exampleDescription": "Example Description:",
    "detailInfo": "For details: gorev template show <template-id>",
    "availableTools": "Available MCP Tools:",
    "toolDescription": "Description: {{.Description}}"
  },
  "headers": {
    "taskList": "## Task List",
    "projectList": "## Project List",
    "pending": "### Pending",
    "inProgress": "### In Progress",
    "completed": "### Completed",
    "cancelled": "### Cancelled",
    "dependencies": "## 🔗 Dependencies",
    "waitingTasks": "### 📋 Tasks waiting for this task:",
    "dependentTasks": "### 🎯 Tasks dependent on this task:",
    "subtasks": "### 🏗️ Subtasks",
    "aiSessionSummary": "## 🤖 AI Session Summary",
    "batchUpdateResult": "## 📦 Batch Update Result",
    "successfulUpdates": "✅ Successful Updates",
    "failedUpdates": "❌ Failed Updates"
  },
  "messages": {
    "noProjectTasks": "*No tasks found for this project.*",
    "noProjects": "No projects found yet.",
    "dependenciesNotAvailable": "*Dependency information not available*",
    "noDependencies": "*This task has no dependencies*",
    "notDependentOnAny": "*Not dependent on any task*",
    "noDependentTasks": "*No tasks depend on this task*",
    "noSubtasks": "*No subtasks found*",
    "noActiveTask": "No active task currently",
    "lastUpdate": "Last update: {{.Date}}",
    "creation": "Created: {{.Date}}",
    "taskId": "ID: {{.Id}}",
    "def": "Definition: {{.Definition}}",
    "taskCount": "Tasks ({{.Start}}-{{.End}} / {{.Total}})",
    "dependentTaskCount": "Dependent task count: {{.Count}}",
    "incompleteDependencyCount": "Incomplete dependency count: {{.Count}}",
    "dependentOnThisCount": "Tasks depending on this: {{.Count}}",
    "tag": "tag",
    "noMatchingTasks": "no matching tasks found",
    "tagCount": "{{.Count}} tags",
    "projectLabel": "Project: {{.Name}}",
    "dateLabel": "Due Date: {{.Date}}",
    "tagLabel": "Tags: {{.Tags}}",
    "tagCountLabel": "{{.Count}} tags",
    "noTasks": "No tasks found",
    "noTasksInProject": "No tasks found in {{.Project}} project",
    "taskListCount": "Total {{.Count}} tasks",
    "projectHeader": "=== {{.Name}} ===",
    "sizeWarning": "⚠️ {{.Count}} more tasks available (limited by pagination)",
    "noActiveProject": "No active project set yet",
    "noTemplates": "No templates found yet",
    "projectHeader": "Project: {{.Name}}",
    "projectDetailLabel": "- **Project:** {{.Name}}",
    "noTasks": "No tasks found yet.",
    "noTasksInProject": "No tasks found in {{.Project}} project yet.",
    "taskListCount": "Tasks ({{.Count}})",
    "noTemplates": "No templates found yet.",
    "upperTaskHeader": "## 📍 Parent Tasks",
    "currentTaskMarker": "└─ **{{.Title}}** (Current Task)",
    "subtaskStats": "## 📈 Subtask Statistics",
    "totalSubtasks": "- **Total Subtasks:** {{.Count}}",
    "progressPercent": "- **Progress:** {{.Percent}}%",
    "directSubtasks": "## 🌳 Direct Subtasks",
    "hierarchyTitle": "# 📊 Task Hierarchy: {{.Title}}",
    "exampleLabel": "example {{.Field}}",
    "fieldSelect": "select [{{.Options}}]",
    "dryRunResult": "🔍 **Dry Run Result**",
    "bulkStatusComplete": "✅ **Bulk Status Change Completed**",
    "processedTasks": "**Processed Tasks:** {{.Count}}",
    "successfulTasks": "**Successful:** {{.Count}}",
    "failedTasks": "**Failed:** {{.Count}}",
    "warningTasks": "**Warnings:** {{.Count}}",
    "executionTime": "**Duration:** {{.Duration}}",
    "successfulTasksHeader": "**✅ Successful Tasks:**",
    "failedTasksHeader": "**❌ Failed Tasks:**",
    "warningsHeader": "**⚠️ Warnings:**",
    "bulkTagComplete": "✅ **Bulk Tag Operation Completed**",
    "operationLabel": "**Operation:** {{.Operation}}",
    "tagsLabel": "**Tags:** {{.Tags}}",
    "smartSuggestions": "🎯 **Smart Suggestions**",
    "totalSuggestions": "**Total:** {{.Count}} suggestions",
    "noSuggestionsNow": "ℹ️ No suggestions available currently.",
    "intelligentTaskCreated": "🧠 **Intelligent Task Created**",
    "mainTask": "### 📋 Main Task",
    "smartPriority": "**Smart Priority:** {{.Emoji}} {{.Priority}}",
    "estimatedTime": "**Estimated Time:** {{.Hours}} hours",
    "autoSubtasks": "### 🌳 Auto Subtasks ({{.Count}})",
    "suggestedTemplate": "### 📋 Suggested Template",
    "templateUsage": "**Usage:** View details with `template_listele`",
    "similarTasks": "### 🔍 Similar Tasks ({{.Count}})",
    "aiAnalysisResults": "### 🎯 AI Analysis Results",
    "confidenceScores": "**Confidence Scores:**",
    "priorityConfidence": "  - Priority: {{.Percent}}%",
    "timeConfidence": "  - Time estimation: {{.Percent}}%",
    "subtaskConfidence": "  - Subtask analysis: {{.Percent}}%",
    "taskDetailTip": "💡 **Tip:** View details with `gorev_detay id='{{.Id}}'`",
    "taskHierarchyInfo": "{{.Indent}}Dependent task count: {{.Count}}",
    "incompleteDepInfo": "{{.Indent}}Incomplete dependency count: {{.Count}}",
    "dependentOnThisInfo": "{{.Indent}}Tasks depending on this: {{.Count}}",
    "taskRangeCount": "{{.Name}} ({{.Count}} tasks)",
    "noTasksInThisProject": "{{.Name}} - No tasks",
    "moreTasksLimit": "*... and {{.Count}} more tasks (size limit)*",
    "templateListHeader": "## 📋 Task Templates",
    "templateUsageTip": "💡 **Usage:** Use `templateden_gorev_olustur` command with template ID and field values.",
    "noIDEsDetected": "No IDEs detected yet."
  },
  "common": {
    "validation": {
      "required": "{{.Param}} parameter is required",
      "required_array": "{{.Param}} parameter is required and must be array",
      "required_object": "{{.Param}} parameter is required and must be an object",
      "invalid_value": "invalid value for field '{{.Param}}': '{{.Value}}'",
      "invalid_format": "invalid {{.Type}} format: {{.Value}}",
      "not_found": "{{.Entity}} not found: {{.Error}}",
      "not_found_id": "{{.Entity}} not found: {{.Id}}",
      "invalid_status": "invalid status: {{.Status}}. Valid statuses: {{.ValidStatuses}}",
      "invalid_priority": "invalid priority: {{.Priority}}",
      "invalid_date": "invalid date format (expected YYYY-MM-DD): {{.Date}}"
    },
    "operations": {
      "create_failed": "failed to create {{.Entity}}: {{.Error}}",
      "update_failed": "failed to update {{.Entity}}: {{.Error}}",
      "delete_failed": "failed to delete {{.Entity}}: {{.Error}}",
      "fetch_failed": "failed to fetch {{.Entity}}: {{.Error}}",
      "save_failed": "failed to save {{.Entity}}: {{.Error}}",
      "process_failed": "failed to process {{.Entity}}: {{.Error}}",
      "init_failed": "failed to initialize {{.Entity}}: {{.Error}}",
      "set_failed": "failed to set {{.Entity}}: {{.Error}}",
      "remove_failed": "failed to remove {{.Entity}}: {{.Error}}",
      "check_failed": "{{.Entity}} check failed: {{.Error}}",
      "add_failed": "failed to add {{.Entity}}: {{.Error}}",
      "query_failed": "failed to query {{.Entity}}: {{.Error}}",
      "list_failed": "failed to list {{.Entity}}: {{.Error}}",
      "edit_failed": "failed to edit {{.Entity}}: {{.Error}}",
      "read_failed": "failed to read {{.Entity}}: {{.Error}}",
      "convert_failed": "failed to convert {{.Entity}} to {{.Format}}: {{.Error}}",
      "parse_failed": "failed to parse {{.Entity}}: {{.Error}}"
    },
    "success": {
      "created": "✓ {{.Entity}} created: {{.Title}} (ID: {{.Id}})",
      "updated": "✓ {{.Entity}} updated: {{.Details}}",
      "deleted": "✓ {{.Entity}} deleted: {{.Title}} (ID: {{.Id}})",
      "set": "✓ {{.Entity}} set: {{.Details}}",
      "removed": "✓ {{.Entity}} removed",
      "added": "✓ {{.Entity}} added: {{.Details}}",
      "moved": "✓ {{.Entity}} moved",
      "edited": "✓ {{.Entity}} edited: {{.Title}}"
    },
    "fields": {
      "id_base": "unique ID",
      "id_simple": "ID",
      "task_id": "task's {{.Type}} ID",
      "project_id": "project's unique ID",
      "parent_id": "parent task's ID",
      "template_id": "template's ID",
      "source_id": "source task's ID",
      "target_id": "target task's ID",
      "id_descriptions": {
        "task_simple": "Task ID",
        "task_unique": "Task's unique ID",
        "task_active": "Task ID to set as active",
        "task_parent": "Parent task's ID",
        "task_move": "Task ID to move",
        "task_new_parent": "New parent task's ID",
        "task_hierarchy": "Task ID to show hierarchy for",
        "task_dependent": "Dependent task ID",
        "task_delete": "Task's unique ID to delete",
        "project_unique": "Project's unique ID",
        "project_active": "Project ID to set as active"
      },
      "task_count": {
        "return_max": "Maximum number of tasks to return",
        "skip": "Number of tasks to skip",
        "return": "Number of tasks to return"
      },
      "project": {
        "project_name": "Project name",
        "project_description": "Project description"
      },
      "defaults": {
        "default_fifty": "(default: 50)",
        "default_five": "(default: 5)",
        "default_zero": "(default: 0)"
      },
      "subtask": {
        "title": "Subtask title",
        "subtask_description": "Subtask description",
        "priority": "Subtask priority level",
        "due_date": "Subtask due date"
      },
      "patterns": {
        "comma_separated": "Comma-separated {{.Entity}} list",
        "with_format": "{{.Description}} ({{.Format}})",
        "file_path": {
          "watch": "File path to watch",
          "remove": "File path to remove"
        },
        "template": {
          "filter": "Filter by template category",
          "template_id": "Template ID to use",
          "fields": "Template field values"
        },
        "batch": {
          "updates": "Update list. Each item should be in {id: string, updates: object} format",
          "query": "Natural language query",
          "dependency_type": "Dependency type"
        }
      }
    },
    "prefixes": {
      "new": "New",
      "filter": "Filter by",
      "return": "Maximum number of",
      "skip": "Number to skip",
      "delete": "Task to delete",
      "active": "Task to set as active",
      "move": "Task to move",
      "hierarchy": "Task to show hierarchy for",
      "dependent": "Dependent task",
      "dependency_target": "Dependency target"
    },
    "entities": {
      "task": "task",
      "project": "project",
      "template": "template",
      "subtask": "subtask",
      "dependency": "dependency",
      "tag": "tag",
      "context": "context",
      "interaction": "interaction",
      "database": "database",
      "migration": "migration",
      "transaction": "transaction",
      "server": "server",
      "file_watcher": "file watcher",
      "hierarchy": "hierarchy",
      "summary": "summary",
      "suggestion": "suggestion",
      "data_manager": "data manager",
      "mcp_server": "MCP server",
      "active_project": "active project",
      "task_tags": "task tags",
      "ai_context": "AI context"
    },
    "suffixes": {
      "required": "parameter is required",
      "invalid": "invalid value for",
      "count": "count",
      "list": "list"
    },
    "pagination": {
      "limit_pattern": "{{.Entity}} to return (default: {{.Default}}, max: {{.Max}})",
      "offset_pattern": "{{.Entity}} to skip for pagination (default: 0)"
    },
    "patterns": {
      "new_field": "{{.Prefix}} {{.Field}}",
      "filter_field": "{{.Prefix}} {{.Entity}} {{.Field}}",
      "id_description": "{{.Entity}} {{.IdType}}"
    },
    "labels": {
      "task_id": "ID",
      "proje": "Project",
      "oncelik": "Priority",
      "durum": "Status",
      "aciklama": "Description",
      "basarili": "Successful",
      "basarisiz": "Failed",
      "uyari": "Warning",
      "sure": "Duration",
      "islenen_gorev": "Processed Tasks",
      "etiketler": "Tags",
      "islem": "Operation",
      "kullanim": "Usage",
      "gorev_sayisi": "Task Count",
      "ipucu": "Tip",
      "islem_suresi": "Operation Duration",
      "hedef_durum": "Target Status",
      "basarili_gorevler": "✅ Successful Tasks",
      "basarisiz_gorevler": "❌ Failed Tasks",
      "uyarilar": "⚠️ Warnings",
      "toplam": "Total",
      "baslik": "Title",
      "guncelleme_tarihi": "Update Date",
      "olusturulma_tarihi": "Creation Date",
      "son_tarih": "Due Date",
      "bekleyen": "Pending",
      "etiket": "Tag"
    },
    "status": {
      "pending": "Pending",
      "in_progress": "In Progress",
      "completed": "Completed",
      "cancelled": "Cancelled"
    },
    "priority": {
      "low": "Low",
      "medium": "Medium",
      "high": "High"
    }
  },
  "tools": {
    "descriptions": {
      "gorev_olustur": "⚠️ DEPRECATED: This tool has been deprecated since v0.10.0. Please use 'templateden_gorev_olustur' tool.",
      "gorev_listele": "Lists tasks by filtering and sorting according to criteria such as status, project, due date.",
      "gorev_detay": "Shows all details of a task in markdown format. Includes information like dependencies, tags, due date.",
      "gorev_guncelle": "Updates a task's status (beklemede, devam_ediyor, tamamlandi).",
      "gorev_duzenle": "Edits a task's properties like title, description, priority.",
      "gorev_sil": "Permanently deletes a task. WARNING: This operation cannot be undone!",
      "proje_olustur": "Creates a new project.",
      "proje_listele": "Lists all projects with task counts.",
      "proje_gorevleri": "Shows tasks belonging to specified project organized by status groups.",
      "aktif_proje_ayarla": "Sets the active project to work on. New tasks will be automatically assigned to this project.",
      "aktif_proje_goster": "Shows the currently active project.",
      "aktif_proje_kaldir": "Removes the active project setting. No project will be active anymore.",
      "template_listele": "Lists available task templates. Templates are used for consistent task creation.",
      "templateden_gorev_olustur": "Creates a new task using the specified template. This is the ONLY way to create tasks in v0.10.0+.",
      "gorev_set_active": "Sets active task for AI session and automatically changes its status to 'devam_ediyor'.",
      "gorev_get_active": "Returns the currently active task for AI session.",
      "gorev_recent": "Returns recently interacted tasks.",
      "gorev_context_summary": "AI-optimized context summary. Shows active task, recent tasks, priorities and blockers.",
      "gorev_batch_update": "Updates multiple tasks at once. Used for efficient bulk operations.",
      "gorev_nlp_query": "Natural language task search. Examples: 'high priority', 'working on today', 'tag:bug'",
      "gorev_search_advanced": "Advanced search - FTS5 full-text search, fuzzy matching, and filters",
      "gorev_filter_profile_save": "Save filter profile - store search and filter settings for future use",
      "gorev_filter_profile_load": "Load filter profile - apply saved search and filter settings",
      "gorev_filter_profile_list": "List filter profiles - show all saved search profiles",
      "gorev_filter_profile_delete": "Delete filter profile - permanently remove saved profile",
      "gorev_search_history": "Search history - show recent searches and their results",
      "gorev_file_watch_add": "Adds a file path to a task and starts monitoring for automatic status updates.",
      "gorev_file_watch_remove": "Removes a file path from a task and stops monitoring.",
      "gorev_file_watch_list": "Lists monitored file paths for a task.",
      "gorev_file_watch_stats": "Shows file watcher system statistics.",
      "gorev_altgorev_olustur": "Creates a subtask under an existing task. Subtask inherits the parent's project.",
      "gorev_ust_degistir": "Changes a task's parent or moves to root level.",
      "gorev_hiyerarsi_goster": "Shows a task's complete hierarchy. Displays parent tasks, subtasks and siblings in full tree structure.",
      "gorev_bagimlilik_ekle": "Creates a dependency relationship between two tasks.",
      "ozet_goster": "Summary report showing system status. Includes total task counts, project statistics, priority distributions and recent activities.",
      "gorev_export": "Export tasks, projects and related data to file in JSON or CSV format. Used for backup and data sharing.",
      "gorev_import": "Import previously exported data back into the system. Offers conflict resolution and selective import options.",
      "ide_detect": "Detect IDEs on the system (VS Code, Cursor, Windsurf)",
      "ide_install": "Install Gorev extension to specified IDE",
      "ide_uninstall": "Remove Gorev extension from specified IDE",
      "ide_status": "Check extension installation status in IDEs",
      "ide_update": "Update Gorev extension to latest version"
    },
    "params": {
      "descriptions": {
        "id_field": "Task's unique ID",
        "task_id": "Task ID to set as active",
        "parent_id": "Parent task ID",
        "gorev_id": "Task ID to move",
        "yeni_parent_id": "New parent task ID. Leave empty to move to root level",
        "kaynak_id": "Dependent task ID (the one that will wait)",
        "hedef_id": "Dependency target ID (must be completed first)",
        "proje_id": "Project's unique ID",
        "template_id": "Template ID to use",
        "durum": "New status",
        "baslik": "New title",
        "aciklama": "New description",
        "oncelik": "New priority level",
        "son_tarih": "New due date (YYYY-MM-DD format)",
        "onay": "Must be true to confirm deletion",
        "durum_filter": "Task status to filter (beklemede, devam_ediyor, tamamlandi)",
        "sirala": "Sorting criteria (son_tarih_asc, son_tarih_desc)",
        "filtre": "Special filter type (acil: due within 7 days, gecmis: overdue)",
        "etiket": "Filter by tag name",
        "tum_projeler": "If true, show tasks from all projects, if false only from active project",
        "limit": "Maximum number of tasks to return (default: 50, max: 200)",
        "offset": "Number of tasks to skip for pagination (default: 0)",
        "isim": "Project name",
        "tanim": "Project description",
        "kategori": "Filter by template category",
        "degerler": "Values for template fields",
        "file_path": "File path to monitor",
        "baglanti_tipi": "Dependency type",
        "query": "Natural language query",
        "updates": "Update list",
        "etiketler": "Comma-separated tag list"
      },
      "export": {
        "output_path": "Path where the exported file will be saved",
        "format": "Export format (json or csv)",
        "include_completed": "Include completed tasks (default: true)",
        "include_dependencies": "Include task dependencies (default: true)",
        "include_templates": "Include templates (default: false)",
        "include_ai_context": "Include AI context data (default: false)",
        "project_filter": "Export only specified projects",
        "date_range": "Date range filter",
        "date_from": "Start date (ISO 8601 format)",
        "date_to": "End date (ISO 8601 format)"
      },
      "import": {
        "file_path": "Path to the file to import",
        "import_mode": "Import mode (merge: add to existing, replace: replace all)",
        "conflict_resolution": "Conflict resolution (skip: skip, overwrite: overwrite, prompt: ask)",
        "preserve_ids": "Preserve original IDs (default: false)",
        "dry_run": "Only analyze, don't make changes (default: false)",
        "project_mapping": "Project ID mapping (old_id: new_id)"
      },
      "ide": {
        "ide_type": "IDE type (vscode, cursor, windsurf or all for all)",
        "extension_id": "Extension ID (default: mehmetsenol.gorev-vscode)"
      }
    }
  },
  "export": {
    "success": "✅ Export successful!\n\n📄 **{{.Format}} format**: {{.Path}}\n📊 **Statistics**:\n- Tasks: {{.Tasks}}\n- Projects: {{.Projects}}\n- Tags: {{.Tags}}\n- Templates: {{.Templates}}",
    "generatedDescription": "Automatic export generated by Gorev MCP Server"
  },
  "import": {
    "success": "Import completed successfully",
    "dryRunResults": "Dry run analysis results",
    "statistics": "Statistics",
    "importedTasks": "Imported tasks",
    "importedProjects": "Imported projects",
    "importedTags": "Imported tags",
    "importedTemplates": "Imported templates",
    "conflicts": "Conflicts",
    "conflictResolution": "resolution",
    "and": "and",
    "moreConflicts": "more conflicts",
    "errors": "Errors",
    "warnings": "Warnings"
  },
  "error": {
    "exportFailed": "Export failed: {{.Error}}",
    "exportSaveFailed": "Failed to save export file: {{.Error}}",
    "importFailed": "Import failed: {{.Error}}",
    "invalidExportOptions": "Invalid export options: {{.Error}}",
    "invalidImportOptions": "Invalid import options: {{.Error}}",
    "failedToExportProjects": "Failed to export projects: {{.Error}}",
    "failedToExportTasks": "Failed to export tasks: {{.Error}}",
    "failedToExportTags": "Failed to export tags: {{.Error}}",
    "failedToExportTemplates": "Failed to export templates: {{.Error}}",
    "failedToExportTaskTags": "Failed to export task tags: {{.Error}}",
    "failedToExportDependencies": "Failed to export dependencies: {{.Error}}",
    "failedToLoadImportData": "Failed to load import data: {{.Error}}",
    "failedToAnalyzeConflicts": "Failed to analyze conflicts: {{.Error}}",
    "invalidImportData": "Invalid import data: {{.Error}}",
    "outputPathRequired": "Output path required",
    "filePathRequired": "File path required",
    "fileNotFound": "File not found: {{.Path}}",
    "invalidFormat": "Invalid format: {{.Format}}",
    "invalidImportMode": "Invalid import mode: {{.Mode}}",
    "invalidConflictResolution": "Invalid conflict resolution: {{.Resolution}}",
    "invalidDateRange": "Invalid date range",
    "failedToCreateDirectory": "Failed to create directory {{.Path}}: {{.Error}}",
    "failedToCreateFile": "Failed to create file {{.Path}}: {{.Error}}",
    "failedToOpenFile": "Failed to open file {{.Path}}: {{.Error}}",
    "failedToWriteFile": "Failed to write to file: {{.Error}}",
    "failedToEncodeJSON": "Failed to encode JSON: {{.Error}}",
    "failedToDecodeJSON": "Failed to decode JSON: {{.Error}}",
    "unsupportedExportFormat": "Unsupported export format: {{.Format}}",
    "missingVersion": "Missing version information",
    "invalidTaskProjectReference": "Invalid task project reference - Project {{.ProjectID}} not found for task {{.TaskID}}",
    "invalidTaskTagTaskReference": "Invalid task-tag task reference - Task {{.TaskID}} not found",
    "invalidTaskTagTagReference": "Invalid task-tag tag reference - Tag {{.TagID}} not found",
    "invalidDependencySourceReference": "Invalid dependency source reference - Source task {{.SourceID}} not found",
    "invalidDependencyTargetReference": "Invalid dependency target reference - Target task {{.TargetID}} not found",
    "ide": {
      "unsupportedType": "Unsupported IDE type: {{.Type}}",
      "notFound": "{{.IDE}} not found",
      "notDetected": "{{.IDE}} not detected",
      "extensionsPathNotFound": "Extensions path not found for {{.IDE}}",
      "cannotReadExtensions": "Cannot read extensions directory {{.Path}}: {{.Error}}",
      "extensionNotInstalled": "{{.Extension}} extension is not installed in {{.IDE}}",
      "downloadFailed": "Failed to download {{.Extension}}: {{.Error}}",
      "installFailed": "Failed to install {{.Extension}} in {{.IDE}}: {{.Error}}",
      "uninstallFailed": "Failed to uninstall {{.Extension}} from {{.IDE}}: {{.Error}}",
      "noIDEsDetected": "No IDEs detected",
      "filter_profile_name_required": "Filter profile name is required",
      "filter_profile_name_exists": "A filter profile named {{.name}} already exists",
      "filter_profile_not_found": "Filter profile with ID {{.id}} not found",
      "cannot_delete_default_profile": "Default filter profiles cannot be deleted"
    }
  },
  "success": {
    "ide": {
      "extensionAlreadyInstalled": "{{.Extension}} is already installed in {{.IDE}} (v{{.Version}})",
      "extensionInstalled": "✓ {{.Extension}} successfully installed in {{.IDE}} (v{{.Version}})",
      "extensionUninstalled": "✓ {{.Extension}} successfully uninstalled from {{.IDE}}"
    }
  },
  "error": {
    "migrationFailed": "Database migration failed",
    "dbInitFailed": "Database initialization failed",
    "migrationExtractFailed": "Failed to extract embedded migrations",
    "migrationDirCreateFailed": "Failed to create migration directory",
    "migrationFileWriteFailed": "Failed to write migration file",
    "dbOpenFailed": "Failed to open database",
    "migrationDriverFailed": "Failed to create migration driver",
    "migrationInstanceFailed": "Failed to create migration instance",
    "migrationProcessFailed": "Failed to process migrations",
    "dbConnectionClosed": "database connection is closed",
    "filterProfileIdRequired": "Filter profile ID is required",
    "filterProfileGetFailed": "Failed to get filter profile: {{.Error}}",
    "filterProfileUnmarshalFailed": "Failed to parse filter profile data: {{.Error}}",
    "filterProfileMarshalFailed": "Failed to serialize filter profile data: {{.Error}}",
    "filterProfileListFailed": "Failed to list filter profiles: {{.Error}}",
    "filterProfileScanFailed": "Failed to read filter profile data: {{.Error}}",
    "filterProfileDeleteFailed": "Failed to delete filter profile: {{.Error}}",
    "filterProfileCreated": "✅ Filter profile created: {{.Name}}",
    "filterProfileDeleted": "✅ Filter profile deleted: {{.Name}}",
    "searchQueryFailed": "Search query failed: {{.Error}}",
    "searchScanFailed": "Failed to read search results: {{.Error}}",
    "serverStart": "Failed to start server: {{.Error}}"
  }
}