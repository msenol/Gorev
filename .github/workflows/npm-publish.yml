name: 📦 NPM Package Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

env:
  GO_VERSION: '1.23'
  NODE_VERSION: '18'

jobs:
  # Build Go binaries for all platforms
  build-binaries:
    name: 🔨 Build Go Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          # Exclude Windows ARM64 for now (can be added if needed)
          - goos: windows
            goarch: arm64

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: 📁 Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('gorev-mcpserver/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: 🏗️ Build binary
        working-directory: ./gorev-mcpserver
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          # Set binary name based on OS
          if [ "${{ matrix.goos }}" = "windows" ]; then
            BINARY_NAME="gorev-${{ matrix.goos }}-${{ matrix.goarch }}.exe"
          else
            BINARY_NAME="gorev-${{ matrix.goos }}-${{ matrix.goarch }}"
          fi

          echo "Building for ${{ matrix.goos }}/${{ matrix.goarch }}"
          echo "Binary name: $BINARY_NAME"

          # Build with version info
          go build -ldflags "-s -w -X main.version=${GITHUB_REF_NAME:-dev}" -o "../gorev-npm/binaries/${{ matrix.goos }}-${{ matrix.goarch }}/${BINARY_NAME##*-}" ./cmd/gorev

      - name: 📤 Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.goos }}-${{ matrix.goarch }}
          path: gorev-npm/binaries/${{ matrix.goos }}-${{ matrix.goarch }}/
          retention-days: 1

  # Test NPM package
  test-npm-package:
    name: 🧪 Test NPM Package
    runs-on: ${{ matrix.os }}
    needs: build-binaries
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [16, 18, 20]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: 📥 Download all binary artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: binary-*
          path: gorev-npm/binaries/
          merge-multiple: true

      - name: 🔧 Setup binaries structure
        working-directory: ./gorev-npm
        shell: bash
        run: |
          # Reorganize binaries from flat structure to platform directories
          mkdir -p binaries-temp
          mv binaries binaries-temp/flat
          mkdir -p binaries

          # Recreate proper structure
          for dir in binaries-temp/flat/binary-*; do
            if [ -d "$dir" ]; then
              platform=$(basename "$dir" | sed 's/binary-//')
              mkdir -p "binaries/$platform"
              cp -r "$dir"/* "binaries/$platform/" || true
            fi
          done

          # Clean up
          rm -rf binaries-temp

          # List the structure for debugging
          echo "Binaries structure:"
          find binaries -type f

      - name: 🔧 Make binaries executable
        if: runner.os != 'Windows'
        working-directory: ./gorev-npm
        run: |
          find binaries -name "gorev" -type f -exec chmod +x {} \;

      - name: 📦 Install package dependencies
        working-directory: ./gorev-npm
        run: npm install

      - name: 🧪 Test package installation
        working-directory: ./gorev-npm
        run: |
          # Test the wrapper directly
          node index.js --version

          # Test via npx simulation
          node bin/gorev-mcp --help

      - name: 🧪 Test MCP server startup
        working-directory: ./gorev-npm
        timeout-minutes: 2
        run: |
          # Start server and check if it responds (basic smoke test)
          timeout 10 node index.js serve || true

  # Publish to NPM
  publish-npm:
    name: 🚀 Publish to NPM
    runs-on: ubuntu-latest
    needs: [build-binaries, test-npm-package]
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: 📥 Download all binary artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: binary-*
          path: gorev-npm/binaries/
          merge-multiple: true

      - name: 🔧 Setup binaries structure
        working-directory: ./gorev-npm
        run: |
          # Reorganize binaries from artifacts structure
          mkdir -p binaries-temp
          mv binaries binaries-temp/flat
          mkdir -p binaries

          # Recreate proper platform directories
          for dir in binaries-temp/flat/binary-*; do
            if [ -d "$dir" ]; then
              platform=$(basename "$dir" | sed 's/binary-//')
              mkdir -p "binaries/$platform"
              cp -r "$dir"/* "binaries/$platform/"
            fi
          done

          # Clean up temp directory
          rm -rf binaries-temp

          # Verify structure
          echo "Final binaries structure:"
          find binaries -type f

          # Make Unix binaries executable
          find binaries -name "gorev" -type f -exec chmod +x {} \;

      - name: 📝 Update package version
        working-directory: ./gorev-npm
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual trigger - bump version
            npm version ${{ github.event.inputs.version_type }} --no-git-tag-version
          else
            # Tag push - use tag version
            VERSION=${GITHUB_REF_NAME#v}
            npm version $VERSION --no-git-tag-version
          fi

      - name: 📦 Install dependencies
        working-directory: ./gorev-npm
        run: npm install --production

      - name: 🧪 Final package validation
        working-directory: ./gorev-npm
        run: |
          # Validate package.json
          npm pack --dry-run

          # Test the package
          node index.js --version

      - name: 🚀 Publish to NPM
        working-directory: ./gorev-npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "Publishing @gorev/mcp-server to NPM..."
          npm publish --access public

      - name: 📋 Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Gorev ${{ github.ref_name }}
          body: |
            ## 🚀 Gorev MCP Server ${{ github.ref_name }}

            ### 📦 NPM Package Available

            You can now install and use Gorev MCP Server with a simple npx command:

            ```bash
            npx @gorev/mcp-server@latest
            ```

            ### 🔧 MCP Configuration

            Add to your `mcp.json`:

            ```json
            {
              "mcpServers": {
                "gorev": {
                  "command": "npx",
                  "args": ["@gorev/mcp-server@latest"],
                  "env": {
                    "GOREV_LANG": "tr"
                  }
                }
              }
            }
            ```

            ### 📱 Supported Platforms

            - ✅ Windows (amd64)
            - ✅ macOS (amd64, arm64)
            - ✅ Linux (amd64, arm64)

            ### 📚 Documentation

            - [Installation Guide](https://github.com/msenol/Gorev#-kurulum)
            - [MCP Tools Reference](https://github.com/msenol/Gorev/blob/main/docs/mcp-araclari.md)
            - [VS Code Extension](https://marketplace.visualstudio.com/items?itemName=mehmetsenol.gorev-vscode)

          draft: false
          prerelease: false

  # Clean up artifacts
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [publish-npm]
    if: always()

    steps:
      - name: 🗑️ Delete artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });

            for (const artifact of artifacts.data.artifacts) {
              if (artifact.name.startsWith('binary-')) {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                });
                console.log(`Deleted artifact: ${artifact.name}`);
              }
            }